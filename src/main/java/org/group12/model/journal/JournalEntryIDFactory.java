package org.group12.model.journal;

import javafx.fxml.Initializable;
import org.group12.model.IDFactory;

import java.util.concurrent.atomic.AtomicLong;
/**
 * Singleton factory class for generating IDs for JournalEntry objects.
 * This class extends the IDFactory abstract class and provides the specific implementation for JournalEntries.
 */
public class JournalEntryIDFactory extends IDFactory  {
    private static final String PREFIX = "JE";
    private static final AtomicLong counter = new AtomicLong(1);
    private static JournalEntryIDFactory instance;
    /**
     * Private constructor to prevent creating multiple instances of the class.
     */
    private JournalEntryIDFactory(){

    }
    /**
     * Returns the single instance of the class. If the instance is null, it creates a new instance.
     *
     * @return the single instance of JournalEntryIDFactory
     */
    public static synchronized JournalEntryIDFactory getInstance(){
        if(instance == null){
            instance = new JournalEntryIDFactory();
        }
        return instance;
    }
    /**
     * Returns the prefix for the IDs generated by this factory.
     *
     * @return the prefix for the IDs
     */
    @Override
    protected String getPrefix() {
        return PREFIX;
    }
    /**
     * Returns the counter for the IDs generated by this factory.
     *
     * @return the counter for the IDs
     */
    @Override
    protected AtomicLong getCounter() {
        return counter;
    }


    /**
     * Returns the type of object for which this factory generates IDs.
     *
     * @return the type of object
     */
    @Override
    protected String getObjectType() {
        return "Journal Entry";
    }
}

